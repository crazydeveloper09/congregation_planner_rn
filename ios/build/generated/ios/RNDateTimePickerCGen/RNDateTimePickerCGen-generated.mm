/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNDateTimePickerCGen.h"


@implementation NativeModuleDatePickerSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeModuleDatePicker_SpecOpenParamsDialogButtons)
+ (RCTManagedPointer *)JS_NativeModuleDatePicker_SpecOpenParamsDialogButtons:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleDatePicker::SpecOpenParamsDialogButtons>(json);
}
@end
@implementation RCTCxxConvert (NativeModuleDatePicker_SpecOpenParams)
+ (RCTManagedPointer *)JS_NativeModuleDatePicker_SpecOpenParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleDatePicker::SpecOpenParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeModuleDatePickerSpecJSI_dismiss(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "dismiss", @selector(dismiss:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeModuleDatePickerSpecJSI_open(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "open", @selector(open:resolve:reject:), args, count);
    }

  NativeModuleDatePickerSpecJSI::NativeModuleDatePickerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["dismiss"] = MethodMetadata {0, __hostFunction_NativeModuleDatePickerSpecJSI_dismiss};
        
        
        methodMap_["open"] = MethodMetadata {1, __hostFunction_NativeModuleDatePickerSpecJSI_open};
        setMethodArgConversionSelector(@"open", 0, @"JS_NativeModuleDatePicker_SpecOpenParams:");
  }
} // namespace facebook::react

@implementation NativeModuleMaterialDatePickerSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeModuleMaterialDatePicker_SpecOpenParamsDialogButtons)
+ (RCTManagedPointer *)JS_NativeModuleMaterialDatePicker_SpecOpenParamsDialogButtons:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleMaterialDatePicker::SpecOpenParamsDialogButtons>(json);
}
@end
@implementation RCTCxxConvert (NativeModuleMaterialDatePicker_SpecOpenParams)
+ (RCTManagedPointer *)JS_NativeModuleMaterialDatePicker_SpecOpenParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleMaterialDatePicker::SpecOpenParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeModuleMaterialDatePickerSpecJSI_dismiss(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "dismiss", @selector(dismiss:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeModuleMaterialDatePickerSpecJSI_open(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "open", @selector(open:resolve:reject:), args, count);
    }

  NativeModuleMaterialDatePickerSpecJSI::NativeModuleMaterialDatePickerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["dismiss"] = MethodMetadata {0, __hostFunction_NativeModuleMaterialDatePickerSpecJSI_dismiss};
        
        
        methodMap_["open"] = MethodMetadata {1, __hostFunction_NativeModuleMaterialDatePickerSpecJSI_open};
        setMethodArgConversionSelector(@"open", 0, @"JS_NativeModuleMaterialDatePicker_SpecOpenParams:");
  }
} // namespace facebook::react

@implementation NativeModuleMaterialTimePickerSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeModuleMaterialTimePicker_SpecOpenParamsDialogButtons)
+ (RCTManagedPointer *)JS_NativeModuleMaterialTimePicker_SpecOpenParamsDialogButtons:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleMaterialTimePicker::SpecOpenParamsDialogButtons>(json);
}
@end
@implementation RCTCxxConvert (NativeModuleMaterialTimePicker_SpecOpenParams)
+ (RCTManagedPointer *)JS_NativeModuleMaterialTimePicker_SpecOpenParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleMaterialTimePicker::SpecOpenParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeModuleMaterialTimePickerSpecJSI_dismiss(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "dismiss", @selector(dismiss:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeModuleMaterialTimePickerSpecJSI_open(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "open", @selector(open:resolve:reject:), args, count);
    }

  NativeModuleMaterialTimePickerSpecJSI::NativeModuleMaterialTimePickerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["dismiss"] = MethodMetadata {0, __hostFunction_NativeModuleMaterialTimePickerSpecJSI_dismiss};
        
        
        methodMap_["open"] = MethodMetadata {1, __hostFunction_NativeModuleMaterialTimePickerSpecJSI_open};
        setMethodArgConversionSelector(@"open", 0, @"JS_NativeModuleMaterialTimePicker_SpecOpenParams:");
  }
} // namespace facebook::react

@implementation NativeModuleTimePickerSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeModuleTimePicker_SpecOpenParamsDialogButtons)
+ (RCTManagedPointer *)JS_NativeModuleTimePicker_SpecOpenParamsDialogButtons:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleTimePicker::SpecOpenParamsDialogButtons>(json);
}
@end
@implementation RCTCxxConvert (NativeModuleTimePicker_SpecOpenParams)
+ (RCTManagedPointer *)JS_NativeModuleTimePicker_SpecOpenParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeModuleTimePicker::SpecOpenParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeModuleTimePickerSpecJSI_dismiss(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "dismiss", @selector(dismiss:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeModuleTimePickerSpecJSI_open(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "open", @selector(open:resolve:reject:), args, count);
    }

  NativeModuleTimePickerSpecJSI::NativeModuleTimePickerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["dismiss"] = MethodMetadata {0, __hostFunction_NativeModuleTimePickerSpecJSI_dismiss};
        
        
        methodMap_["open"] = MethodMetadata {1, __hostFunction_NativeModuleTimePickerSpecJSI_open};
        setMethodArgConversionSelector(@"open", 0, @"JS_NativeModuleTimePicker_SpecOpenParams:");
  }
} // namespace facebook::react
